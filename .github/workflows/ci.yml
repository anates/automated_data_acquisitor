name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.12'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6 libegl-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: |
          echo "No testing included yet for Python ${{ matrix.python-version }}"
          # poetry run pytest ./tests/

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit_report.xml
            coverage.xml

  wheel-build:
    name: Build Wheel
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Publish to GitHub Packages
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry publish --build --username $TWINE_USERNAME --password $TWINE_PASSWORD

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: dist/*.whl

  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Build Sphinx docs
        run: |
          cd docs
          poetry run sphinx-apidoc -o ./source/ ../src/automated_data_acquisitor/ --force
          poetry run sphinx-build -M html ./source/ ./build/
          mv build/html ../public/

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: public/

  github-pages:
    name: Deploy Docs to GitHub Pages
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: documentation
          path: public/

      - uses: actions/configure-pages@v4

      - uses: actions/upload-pages-artifact@v2
        with:
          path: public/

      - uses: actions/deploy-pages@v3

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [wheel-build, docs]
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Extract version
        id: set_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=v$VERSION" >> "$GITHUB_OUTPUT"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheel
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload wheel to Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl